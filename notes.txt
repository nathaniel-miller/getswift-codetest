//export drones and packages data.
//require drones and packages data.

//function takes drones and packages.
//outputs object with assignments and unassigned packages

//establish current time as a const;

//function packageDestination(package) {
  //return [lat, long];
}



function droneLocation(drone) {
  //return location;
}

function droneDestination(drone) {
  return destination;
}

function packageDeadline(package) {
  return deadline;
}

//base lat/long -37.8166597, 144.9616589

// Use Haversine Formula

function calcDistance(lat1, lon1, lat2, lon2, unit) {
        var radlat1 = Math.PI * lat1/180
        var radlat2 = Math.PI * lat2/180
        var radlon1 = Math.PI * lon1/180
        var radlon2 = Math.PI * lon2/180
        var theta = lon1-lon2
        var radtheta = Math.PI * theta/180
        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
        dist = Math.acos(dist)
        dist = dist * 180/Math.PI
        dist = dist * 60 * 1.1515
        if (unit=="K") { dist = dist * 1.609344 }
        if (unit=="N") { dist = dist * 0.8684 }
        return dist
} //http://www.htmlgoodies.com/beyond/javascript/calculate-the-distance-between-two-points-in-your-web-apps.html


//function calcTime(distance, speed(K)) {//speed is a const 50km/hour;
  return distance / speed;
}

//function deliveryTime(package) { //time from base to destination
  let d = calcDistance(basecoords, destcoords);
  let t = calTime(d, 50km/hour)

  return t;
}

//function availableTime(package) {
  deadline - current time; //will be in seconds
}

//function returnTime(drone) {
  let x = calcDistance(location, destination)
  let y = calcDistance(destination, basecoords) 
  // this (y) time could be stored rather than recalculated if drones could take more than one package.
}

//function requiredTime(deliveryTime, returnTime) {
  deliveryTime + returnTime
}

//function isDeliverable(requiredTime, availableTime) {
  availableTime - requiredTime > 0 ? true : false;
}

//function sortPackages(packages) {
  //sort based upon smallest availableTime();
}

//function sortDrones(drones) {
  //sort based upon shortest returnTime();
}

//function dispatch() {
  //establish assignments array and unassigned array.
  //iterate through sorted packages
    //get requiredTime(package);
      //call first drone in line;
    //get availableTime(package)
    //if package isDeliverable(package), assign drone and package. Remove drone from list. Else place into unassigned.
}

//function assignPackageToDrone(package, drone) {
  return assignment object;
}

***PROBLEM***
List Packages => Destinations + Times (Deadline - Current Time);

Drones Can have a package (current location + destination + return to base)
Drones Can be on their way back (return to base)
Drones Can be at base.

Time to deliver from base.

//get lat and long of depo.
//write a function to calculate distance between two locations (given lat/long).

1) Calculate delivery time from base for each incoming package. (delivery time)
2) Calculate how much time until deadline (available time).
3) Calculate time until each drone can leave. (return time)

4) Package with the the smallest amount of available time
    (sort packages by (available time))
   gets assigned to the drone with the smallest return time. 
   (Sort by return time). 
   IF (required time) < (available time).

*If delivery time plus return time < available time 
  = deliverable. (required time) //calculate this for every drone/package combo?   

* What if a drone COULD delivery one package in the available time OR two closer packages?
//Code Test Says this is not allowed - dispatching problem.







